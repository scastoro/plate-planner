// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: workouts.sql

package database

import (
	"context"
	"time"
)

const createWorkout = `-- name: CreateWorkout :one
INSERT INTO workouts (start_time, duration, total_weight, total_calories, user_id)
values($1, $2, $3, $4, $5)
RETURNING id, start_time, duration, total_weight, total_calories, user_id
`

type CreateWorkoutParams struct {
	StartTime     time.Time
	Duration      string
	TotalWeight   string
	TotalCalories int32
	UserID        int32
}

func (q *Queries) CreateWorkout(ctx context.Context, arg CreateWorkoutParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, createWorkout,
		arg.StartTime,
		arg.Duration,
		arg.TotalWeight,
		arg.TotalCalories,
		arg.UserID,
	)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.Duration,
		&i.TotalWeight,
		&i.TotalCalories,
		&i.UserID,
	)
	return i, err
}

const getWorkoutById = `-- name: GetWorkoutById :one
SELECT id, start_time, duration, total_weight, total_calories, user_id FROM workouts where user_id = $1
`

func (q *Queries) GetWorkoutById(ctx context.Context, userID int32) (Workout, error) {
	row := q.db.QueryRowContext(ctx, getWorkoutById, userID)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.Duration,
		&i.TotalWeight,
		&i.TotalCalories,
		&i.UserID,
	)
	return i, err
}

const getWorkoutsByUserIdAsc = `-- name: GetWorkoutsByUserIdAsc :many
SELECT id, start_time, duration, total_weight, total_calories, user_id FROM workouts where user_id = $1::int
ORDER BY $2::text ASC
LIMIT $4::int
OFFSET $3::int
`

type GetWorkoutsByUserIdAscParams struct {
	UserID     int32
	OrderByCol string
	Offset     int32
	Limit      int32
}

func (q *Queries) GetWorkoutsByUserIdAsc(ctx context.Context, arg GetWorkoutsByUserIdAscParams) ([]Workout, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutsByUserIdAsc,
		arg.UserID,
		arg.OrderByCol,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.StartTime,
			&i.Duration,
			&i.TotalWeight,
			&i.TotalCalories,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkoutsByUserIdDesc = `-- name: GetWorkoutsByUserIdDesc :many
SELECT id, start_time, duration, total_weight, total_calories, user_id FROM workouts where user_id = $1::int
ORDER BY $2::text DESC
LIMIT $4::int
OFFSET $3::int
`

type GetWorkoutsByUserIdDescParams struct {
	UserID     int32
	OrderByCol string
	Offset     int32
	Limit      int32
}

func (q *Queries) GetWorkoutsByUserIdDesc(ctx context.Context, arg GetWorkoutsByUserIdDescParams) ([]Workout, error) {
	rows, err := q.db.QueryContext(ctx, getWorkoutsByUserIdDesc,
		arg.UserID,
		arg.OrderByCol,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Workout
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.StartTime,
			&i.Duration,
			&i.TotalWeight,
			&i.TotalCalories,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkoutById = `-- name: UpdateWorkoutById :one
UPDATE workouts SET (duration, total_weight, total_calories) 
    = ($1, $2, $3)
WHERE id = $4
RETURNING id, start_time, duration, total_weight, total_calories, user_id
`

type UpdateWorkoutByIdParams struct {
	Duration      string
	TotalWeight   string
	TotalCalories int32
	ID            int32
}

func (q *Queries) UpdateWorkoutById(ctx context.Context, arg UpdateWorkoutByIdParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, updateWorkoutById,
		arg.Duration,
		arg.TotalWeight,
		arg.TotalCalories,
		arg.ID,
	)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.Duration,
		&i.TotalWeight,
		&i.TotalCalories,
		&i.UserID,
	)
	return i, err
}
