// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "Admin"."Users" (id, first_name, last_name, body_weight, username, email, password, lastLoggedIn)
values($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, first_name, last_name, body_weight, username, email, password, lastloggedin
`

type CreateUserParams struct {
	ID           int32
	FirstName    sql.NullString
	LastName     sql.NullString
	BodyWeight   sql.NullString
	Username     sql.NullString
	Email        sql.NullString
	Password     sql.NullString
	Lastloggedin sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (AdminUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.FirstName,
		arg.LastName,
		arg.BodyWeight,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Lastloggedin,
	)
	var i AdminUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.BodyWeight,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Lastloggedin,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, body_weight, username, email, password, lastloggedin FROM "Admin"."Users" where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (AdminUser, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i AdminUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.BodyWeight,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Lastloggedin,
	)
	return i, err
}
