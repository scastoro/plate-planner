// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "Admin"."Users" (first_name, last_name, body_weight, username, email, password, lastLoggedIn)
values($1, $2, $3, $4, $5, $6, $7)
RETURNING id, first_name, last_name, body_weight, username, email, password, lastloggedin, role_id
`

type CreateUserParams struct {
	FirstName    string
	LastName     string
	BodyWeight   string
	Username     string
	Email        string
	Password     string
	Lastloggedin time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (AdminUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.BodyWeight,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.Lastloggedin,
	)
	var i AdminUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.BodyWeight,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Lastloggedin,
		&i.RoleID,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, body_weight, username, email, password, lastloggedin, role_id FROM "Admin"."Users" where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (AdminUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i AdminUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.BodyWeight,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Lastloggedin,
		&i.RoleID,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, first_name, last_name, body_weight, username, email, password, lastloggedin, role_id FROM "Admin"."Users" where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int32) (AdminUser, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i AdminUser
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.BodyWeight,
		&i.Username,
		&i.Email,
		&i.Password,
		&i.Lastloggedin,
		&i.RoleID,
	)
	return i, err
}

const getUserByIdWithPerms = `-- name: GetUserByIdWithPerms :many
SELECT u.id, u.first_name, u.last_name, u.body_weight, u.username, u.email, u.password, u.lastloggedin, u.role_id,
 r.name as role, 
 p.resource, 
 p.action as permission
FROM "Admin"."Users" as u
JOIN roles as r
ON u.role_id = r.id
JOIN rolesPermissions as rp
ON u.role_id = rp.role_id
JOIN permissions as p
ON p.id = rp.permission_id
WHERE u.id = $1
`

type GetUserByIdWithPermsRow struct {
	ID           int32
	FirstName    string
	LastName     string
	BodyWeight   string
	Username     string
	Email        string
	Password     string
	Lastloggedin time.Time
	RoleID       int32
	Role         string
	Resource     string
	Permission   Crud
}

func (q *Queries) GetUserByIdWithPerms(ctx context.Context, id int32) ([]GetUserByIdWithPermsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserByIdWithPerms, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserByIdWithPermsRow
	for rows.Next() {
		var i GetUserByIdWithPermsRow
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.BodyWeight,
			&i.Username,
			&i.Email,
			&i.Password,
			&i.Lastloggedin,
			&i.RoleID,
			&i.Role,
			&i.Resource,
			&i.Permission,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
